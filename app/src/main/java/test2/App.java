/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test2;

import java.util.*;
import java.util.stream.IntStream;
import jdk.incubator.vector.FloatVector;
import jdk.incubator.vector.VectorSpecies;
import jdk.incubator.vector.VectorOperators;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static float dotProduct(float[] a, float[] b) {
      float res = 0f;
      for (int i = 0; i < a.length; i++) {
        res += a[i] * b[i];
      }
      return res;
    }

    static final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_PREFERRED;

    public static float dotProductVec(float[] a, float[] b) {
      int i = 0;
      float res = 0f;
      FloatVector acc = FloatVector.zero(SPECIES);
      int upperBound = SPECIES.loopBound(a.length);
      for (; i < upperBound; i += SPECIES.length()) {
        FloatVector va = FloatVector.fromArray(SPECIES, a, i);
	FloatVector vb = FloatVector.fromArray(SPECIES, b, i);
	acc = acc.add(va.mul(vb));
      }
      // reduce
      res = acc.reduceLanes(VectorOperators.ADD);
      // tail
      for (; i < a.length; i++) {
	res += b[i] * a[i];
      }
      return res;
    }

    public static void main(String[] args) {
	short SIZE = 10;

	var vec1d = IntStream.range(0,SIZE).mapToDouble(i -> (float)Math.random()).toArray();
	var vec2d = IntStream.range(0,SIZE).mapToDouble(i -> (float)Math.random()).toArray();
	float[] vec1 = new float[SIZE], vec2 = new float[SIZE];
	for (int i = 0; i < SIZE; i++) {
	    vec1[i] = (float)vec1d[i];
    	    vec2[i] = (float)vec2d[i];
	}
	var dotRes = dotProduct(vec1, vec2);
	var dotResV = dotProductVec(vec1, vec2);

	long startTime = System.nanoTime();
	dotRes = dotProduct(vec1, vec2);
	long endTime = System.nanoTime();
	long duration = endTime - startTime;

	startTime = System.nanoTime();
	dotResV = dotProductVec(vec1, vec2);
	dotRes = dotProduct(vec1, vec2);
	endTime = System.nanoTime();
	long durationVec = endTime - startTime;
	
	System.out.println("Scalar execution time: " + duration + " nanoseconds");
	System.out.println("Vector execution time: " + durationVec + " nanoseconds");

        //System.out.println(new App().getGreeting());
    }
}
